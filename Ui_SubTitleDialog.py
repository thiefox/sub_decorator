# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'o:\src\python\win-bigma\SubTitleDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from os import stat
from tkinter.constants import NO
from PyQt5 import QtCore, QtGui, QtWidgets

import os
import sys
import time
import datetime
import threading

from com_utils import config
from com_utils import global_data
from com_utils import FileOpWrapper
from com_utils import TaskManager

from subtitle import sub_task

class Ui_DialogSubTitle(QtCore.QObject):
    sig_processor = QtCore.pyqtSignal(str)      #进度信号，当前正在处理的视频文件
    sig_finished = QtCore.pyqtSignal(int)       #工作线程运行结束

    def __init__(self) :
        print('Ui_DialogSubTitle init calling...')
        super(Ui_DialogSubTitle, self).__init__()
        self.task_obj = None
        self.task_lock = threading.Lock()
        #self.GS_JOB = None
        #self.JOB_LOCK = threading.Lock()
        self.std_out = None
        self.log_file = None
        self.config = global_data.bm_config
        print('Ui_DialogSubTitle init called')        
        return

    def setupUi(self, DialogSubTitle):
        DialogSubTitle.setObjectName("DialogSubTitle")
        DialogSubTitle.setWindowModality(QtCore.Qt.ApplicationModal)
        DialogSubTitle.resize(708, 559)
        self.label = QtWidgets.QLabel(DialogSubTitle)
        self.label.setGeometry(QtCore.QRect(30, 20, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButtonChooseDir = QtWidgets.QPushButton(DialogSubTitle)
        self.pushButtonChooseDir.setGeometry(QtCore.QRect(620, 60, 41, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonChooseDir.setFont(font)
        self.pushButtonChooseDir.setObjectName("pushButtonChooseDir")
        self.comboBoxFilePath = QtWidgets.QComboBox(DialogSubTitle)
        self.comboBoxFilePath.setGeometry(QtCore.QRect(30, 60, 571, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBoxFilePath.setFont(font)
        self.comboBoxFilePath.setEditable(True)
        self.comboBoxFilePath.setObjectName("comboBoxFilePath")
        self.progressBar = QtWidgets.QProgressBar(DialogSubTitle)
        self.progressBar.setGeometry(QtCore.QRect(30, 400, 661, 41))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.labelTaskInfo = QtWidgets.QLabel(DialogSubTitle)
        self.labelTaskInfo.setGeometry(QtCore.QRect(20, 460, 661, 20))
        self.labelTaskInfo.setObjectName("labelTaskInfo")
        self.widget = QtWidgets.QWidget(DialogSubTitle)
        self.widget.setGeometry(QtCore.QRect(30, 130, 231, 121))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.checkBoxTVDir = QtWidgets.QCheckBox(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkBoxTVDir.setFont(font)
        self.checkBoxTVDir.setObjectName("checkBoxTVDir")
        self.verticalLayout.addWidget(self.checkBoxTVDir)
        self.checkBoxForceAll = QtWidgets.QCheckBox(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkBoxForceAll.setFont(font)
        self.checkBoxForceAll.setObjectName("checkBoxForceAll")
        self.verticalLayout.addWidget(self.checkBoxForceAll)
        self.checkBoxToCHS = QtWidgets.QCheckBox(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkBoxToCHS.setFont(font)
        self.checkBoxToCHS.setObjectName("checkBoxToCHS")
        self.verticalLayout.addWidget(self.checkBoxToCHS)

        self.widget1 = QtWidgets.QWidget(DialogSubTitle)
        self.widget1.setGeometry(QtCore.QRect(30, 320, 631, 71))
        self.widget1.setObjectName("widget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButtonRun = QtWidgets.QPushButton(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonRun.setFont(font)
        self.pushButtonRun.setObjectName("pushButtonRun")
        self.horizontalLayout.addWidget(self.pushButtonRun)
        self.pushButtonSuspend = QtWidgets.QPushButton(self.widget1)
        self.pushButtonSuspend.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonSuspend.setFont(font)
        self.pushButtonSuspend.setObjectName("pushButtonSuspend")
        self.horizontalLayout.addWidget(self.pushButtonSuspend)
        self.pushButtonCancel = QtWidgets.QPushButton(self.widget1)
        self.pushButtonCancel.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonCancel.setFont(font)
        self.pushButtonCancel.setObjectName("pushButtonCancel")
        self.horizontalLayout.addWidget(self.pushButtonCancel)
        self.pushButtonExit = QtWidgets.QPushButton(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonExit.setFont(font)
        self.pushButtonExit.setObjectName("pushButtonExit")
        self.horizontalLayout.addWidget(self.pushButtonExit)

        self.retranslateUi(DialogSubTitle)
        DialogSubTitle.rejected.connect(self.dialog_close)

        self.pushButtonChooseDir.clicked.connect(self.chooseFileDir)
        self.pushButtonRun.clicked.connect(self.genSubTitleEx)
        self.pushButtonSuspend.clicked.connect(self.threadPaused)
        self.pushButtonCancel.clicked.connect(self.threadCanceled)
        self.pushButtonExit.clicked.connect(DialogSubTitle.reject)
        self.sig_finished.connect(self.thread_finished)
        self.sig_processor.connect(self.thread_process)
        QtCore.QMetaObject.connectSlotsByName(DialogSubTitle)

        self.pushButtonRun.setToolTip('如合成了双语字幕，会把源中英字幕移动到tmp子目录下。\n如进行了简体转换，则会把源繁体字幕重命名为-CHT。')

        self.init_from_config()
        return

    def retranslateUi(self, DialogSubTitle):
        _translate = QtCore.QCoreApplication.translate
        DialogSubTitle.setWindowTitle(_translate("DialogSubTitle", "字幕处理"))
        self.label.setText(_translate("DialogSubTitle", "文件目录"))
        self.pushButtonChooseDir.setText(_translate("DialogSubTitle", "..."))
        self.labelTaskInfo.setText(_translate("DialogSubTitle", "任务通知"))
        self.checkBoxTVDir.setText(_translate("DialogSubTitle", "电视目录"))
        self.checkBoxForceAll.setText(_translate("DialogSubTitle", "强制全部生成"))
        self.checkBoxToCHS.setText(_translate("DialogSubTitle", "繁转简"))
        self.pushButtonRun.setText(_translate("DialogSubTitle", "生成BigB字幕"))
        self.pushButtonSuspend.setText(_translate("DialogSubTitle", "暂停任务"))
        self.pushButtonCancel.setText(_translate("DialogSubTitle", "取消任务"))
        self.pushButtonExit.setText(_translate("DialogSubTitle", "关 闭"))

    #对话框关闭通知处理
    def dialog_close(self) :
        print('begin dialog_close...')
        self.save_to_config()
        print('end dialog_close.')
        return

    #从combo获取当前有效的处理目录。无效则返回''
    def _get_combo_dir(self) :
        input_dir = self.comboBoxFilePath.currentText().replace('/', '\\')
        #input_dir = os.path.normcase(input_dir)
        #QtWidgets.QMessageBox.information(None, '选择目录2', input_dir, QtWidgets.QMessageBox.Ok)
        if os.path.isdir(input_dir) :
            self._add_string_to_dir_list(input_dir)
        else :
            input_dir = ''
            QtWidgets.QMessageBox.critical(None, '输入错误', '输入的非有效目录，请重新选择。', QtWidgets.QMessageBox.Ok)
        return input_dir

    def init_from_config(self) :
        dirs = self.config.get_dirs(config.bigma_config.SECTION_SUBTITLE, config.bigma_config.SUBTITLE_KEY_HISTORY_DIRS)
        self.comboBoxFilePath.addItems(dirs)
        if self.config.get_param(config.bigma_config.SECTION_SUBTITLE, config.bigma_config.SUBTITLE_KEY_TV_DIR)=='1' :
            self.checkBoxTVDir.setChecked(True)
        if self.config.get_param(config.bigma_config.SECTION_SUBTITLE, config.bigma_config.SUBTITLE_KEY_FORCE_REBUILD)=='1' :
            self.checkBoxForceAll.setChecked(True)
        if self.config.get_param(config.bigma_config.SECTION_SUBTITLE, config.bigma_config.SUBTITLE_KEY_CHT_TO_CHS)=='1' :
            self.checkBoxToCHS.setChecked(True)
        return

    def gen_save_historys(self) :
        MAX_SAVE_COUNT = 20        
        dirs = []
        dir = self.comboBoxFilePath.currentText()   #当前显示文本
        count = 0
        if os.path.isdir(dir) :
            dirs.append(dir)
            count += 1
        for i in range(self.comboBoxFilePath.count()) :
            if count >= MAX_SAVE_COUNT :
                break
            dir = self.comboBoxFilePath.itemText(i)
            if os.path.isdir(dir) and dirs.count(dir) == 0 :
                dirs.append(dir)
                count += 1
        return dirs

    def save_to_config(self) :
        print('time={}, save_to_config call...'.format(datetime.datetime.now().strftime('%H:%M:%S,%f')[:-3]))
        history_dirs = self.gen_save_historys()
        self.config.set_dirs(config.bigma_config.SECTION_SUBTITLE, config.bigma_config.SUBTITLE_KEY_HISTORY_DIRS, history_dirs)
        checked = '1' if self.checkBoxTVDir.isChecked() else '0'
        self.config.set_param(config.bigma_config.SECTION_SUBTITLE, config.bigma_config.SUBTITLE_KEY_TV_DIR, checked)
        checked = '1' if self.checkBoxForceAll.isChecked() else '0'
        self.config.set_param(config.bigma_config.SECTION_SUBTITLE, config.bigma_config.SUBTITLE_KEY_FORCE_REBUILD, checked)
        checked = '1' if self.checkBoxToCHS.isChecked() else '0'
        self.config.set_param(config.bigma_config.SECTION_SUBTITLE, config.bigma_config.SUBTITLE_KEY_CHT_TO_CHS, checked)
        self.config.save()
        print('time={}, save_to_config finished.'.format(datetime.datetime.now().strftime('%H:%M:%S,%f')[:-3]))
        return

    def fire_thread_finished(self, flag) :
        print('回调函数收到线程结束通知=%d.' %flag)
        self.sig_finished.emit(flag)
        return

    def fire_thread_process(self, info) :
        print('回调函数收到线程进度通知=%s.' %info)
        self.sig_processor.emit(info)
        return

    #窗口关闭处理
    def dialogClose(self) :
        print('begin dialogClose...')
        #保存状态到ini
        self.save_to_config()
        print('end dialogClose.')
        return

    #选择目录对话框
    def chooseFileDir(self) :
        from PyQt5.QtWidgets import QFileDialog

        cur_dir = self._get_combo_dir()
        if cur_dir == '' :
            cur_dir = 'C:\\'

        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.Directory)
        dlg.setDirectory(cur_dir)    #初始目录
        if dlg.exec() :
            files = dlg.selectedFiles()
            print(files)
            choose_dir = files[0].replace('/', '\\')
            self._add_string_to_dir_list(choose_dir)
        return

    def _add_string_to_dir_list(self, str) :
        if not os.path.isdir(str) :
            return False
        found = False
        i = 0
        for i in range(self.comboBoxFilePath.count()) :
            cur_dir = self.comboBoxFilePath.itemText(i)
            if os.path.normcase(str) == os.path.normcase(cur_dir) :
                found = True
                break
        if found :          #选择的为已有项
            assert(i < self.comboBoxFilePath.count())
            self.comboBoxFilePath.setCurrentIndex(i)
        else :              #新项
            #format = os.path.normcase(str)
            format = str
            self.comboBoxFilePath.addItem(format)
            assert(self.comboBoxFilePath.count() > 0)
            self.comboBoxFilePath.setCurrentIndex(self.comboBoxFilePath.count() - 1)        #新项设置为当前项
        return True

    #线程暂停
    def threadPaused(self) :
        self.pushButtonSuspend.setEnabled(False)
        status = self.pushButtonSuspend.text()
        print('主进程：暂停工作线程开始, cur_status=%s...' %(status))
        if status == '暂停任务' :
            self.task_obj.pause()
            self.pushButtonSuspend.setText('继续任务')
        else :
            if status != '继续任务' :
                print('异常：当前按钮文本异常=%s.' %(status))
            self.task_obj.resume()
            self.pushButtonSuspend.setText('暂停任务')
        time.sleep(1)       #休眠1秒
        self.pushButtonSuspend.setEnabled(True)
        print('主进程：暂停工作线程结束。')
        return

    #线程取消
    def threadCanceled(self) :
        print('主进程：取消工作线程开始...')
        self.pushButtonCancel.setEnabled(False)
        print('主进程：调用暂停工作线程...')
        self.task_obj.pause()
        print('主进程：调用暂停工作线程后返回。')
        select = QtWidgets.QMessageBox.question(None, '取消执行', '是否要取消BIGB字幕的生成？', QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No)
        if select == QtWidgets.QMessageBox.Yes :
            print('主进程：UI用户二次确认，物理取消工作线程开始...')
            self.task_obj.cancel()
            #从回调消息可以知道是否线程已取消
            print('主进程：二次确认后物理取消工作线程结束。')
        else :
            print('主进程：UI用户放弃，恢复工作线程开始...')
            self.task_obj.resume()
            time.sleep(1)
            self.pushButtonCancel.setEnabled(True)
            print('主进程：恢复工作线程结束。')
        print('主进程：取消工作线程结束。')
        return

    #线程运行结束前调用，用于复位窗口状态。使之可以进行下一次线程运行或者退出窗口。
    #flag=0，没有需要处理的视频。flag=1，正常完成后退出。flag=-1，中途取消。
    def thread_finished(self, flag) :
        print('主线程收到完成消息: (%d).' %flag)
        assert(self.task_obj is not None)
        assert(self.std_out is not None)
        assert(self.log_file is not None)
        self.task_lock.acquire()
        self.pushButtonExit.setEnabled(True)
        self.pushButtonCancel.setEnabled(False)
        self.pushButtonSuspend.setEnabled(False)
        self.pushButtonRun.setEnabled(True)
        self.labelTaskInfo.setText('工作线程已结束。')
        self.task_obj.join()           #确保工作线程结束
        self.task_obj = None
        sys.stdout = self.std_out
        self.log_file.flush()
        self.log_file.close()
        self.log_file = None
        self.std_out = None
        self.task_lock.release()
        time.sleep(1)
        return

    def thread_process(self, info) :
        def _is_int(str) :
            try:
                x = int(str)
                return True
            except ValueError :
                return False
        print('主线程收到进度消息: (%s).' %info)
        infos = info.split('|', 1)
        if len(infos) == 2 :                #'35|文件名'格式
            file_name = infos[1]
            self.labelTaskInfo.setText(file_name)
            percent = infos[0]
            if _is_int(percent) :
                value = int(percent)
                if self.progressBar.value != value :
                    self.progressBar.setValue(value)
        else :
            if _is_int(infos[0]) :           #进度指示
                value = int(infos[0])
                if self.progressBar.value != value :
                    self.progressBar.setValue(value)
            else :                                      #当前处理文件名
                self.labelTaskInfo.setText(infos[0])
        return

    def genSubTitleEx(self) :
        input_dir = self._get_combo_dir()
        if input_dir == '' :
            return

        assert(self.std_out is None)
        assert(self.log_file is None)
        self.task_lock.acquire()
        if self.task_obj is not None :
            self.task_lock.release()
            QtWidgets.QMessageBox.critical(None, '程序异常', '已有工作线程在运行中，无法启动。', QtWidgets.QMessageBox.Ok)
            return

        self.progressBar.setValue(0)

        log_name = FileOpWrapper.gen_log_file_name('字幕生成')
        self.log_file = open(log_name, 'w+', encoding='utf-8')

        self.std_out = sys.stdout
        sys.stdout = self.log_file  #标准输出重定向至文件

        self.task_obj = TaskManager.TaskJob()
        #初始化通知信号
        self.task_obj.init_notify_info(self, Ui_DialogSubTitle.fire_thread_process, Ui_DialogSubTitle.fire_thread_finished)
        global mgs
        #mgs  = bigma.Gen_Sub_Task()
        mgs = sub_task.sub_generate_task()
        mgs.IS_TVSHOW_DIR = self.checkBoxTVDir.isChecked()
        mgs.FORCE_REBUILD = self.checkBoxForceAll.isChecked()
        #mgs.CHT_TO_CHS = self.checkBoxToCHS.isChecked()

        self.task_obj.init_deal_obj(mgs)
        self.task_obj.prepare(input_dir)
        
        print('启动线程...')
        self.pushButtonCancel.setEnabled(True)
        self.pushButtonSuspend.setEnabled(True)
        self.task_obj.start()          #启动线程
        print('线程启动完成。')
        self.task_lock.release()        
        return
